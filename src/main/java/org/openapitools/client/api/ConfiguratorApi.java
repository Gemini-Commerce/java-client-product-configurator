/*
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import GeminiCommerce.ProductConfigurator.ApiCallback;
import GeminiCommerce.ProductConfigurator.ApiClient;
import GeminiCommerce.ProductConfigurator.ApiException;
import GeminiCommerce.ProductConfigurator.ApiResponse;
import GeminiCommerce.ProductConfigurator.Configuration;
import GeminiCommerce.ProductConfigurator.Pair;
import GeminiCommerce.ProductConfigurator.ProgressRequestBody;
import GeminiCommerce.ProductConfigurator.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfiguratorListResponse;
import org.openapitools.client.model.GooglerpcStatus;
import org.openapitools.client.model.ProductConfiguratorCopyConfiguratorRequest;
import org.openapitools.client.model.ProductConfiguratorCreateConfiguratorRequest;
import org.openapitools.client.model.ProductConfiguratorListPropertiesRequest;
import org.openapitools.client.model.ProductConfiguratorUpdateConfiguratorRequest;
import org.openapitools.client.model.ProductconfiguratorconfiguratorEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfiguratorApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConfiguratorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfiguratorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for productConfiguratorCopyConfigurator
     * @param tenantId  (required)
     * @param sourceConfiguratorId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request or Limit Exceeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorCopyConfiguratorCall(String tenantId, String sourceConfiguratorId, ProductConfiguratorCopyConfiguratorRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{tenantId}/product/{sourceConfiguratorId}/copy"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "sourceConfiguratorId" + "}", localVarApiClient.escapeString(sourceConfiguratorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "standardAuthorization", "APIAuthorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productConfiguratorCopyConfiguratorValidateBeforeCall(String tenantId, String sourceConfiguratorId, ProductConfiguratorCopyConfiguratorRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling productConfiguratorCopyConfigurator(Async)");
        }

        // verify the required parameter 'sourceConfiguratorId' is set
        if (sourceConfiguratorId == null) {
            throw new ApiException("Missing the required parameter 'sourceConfiguratorId' when calling productConfiguratorCopyConfigurator(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productConfiguratorCopyConfigurator(Async)");
        }

        return productConfiguratorCopyConfiguratorCall(tenantId, sourceConfiguratorId, body, _callback);

    }

    /**
     * Copy Configurator
     * Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
     * @param tenantId  (required)
     * @param sourceConfiguratorId  (required)
     * @param body  (required)
     * @return ProductconfiguratorconfiguratorEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request or Limit Exceeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProductconfiguratorconfiguratorEntity productConfiguratorCopyConfigurator(String tenantId, String sourceConfiguratorId, ProductConfiguratorCopyConfiguratorRequest body) throws ApiException {
        ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResp = productConfiguratorCopyConfiguratorWithHttpInfo(tenantId, sourceConfiguratorId, body);
        return localVarResp.getData();
    }

    /**
     * Copy Configurator
     * Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
     * @param tenantId  (required)
     * @param sourceConfiguratorId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ProductconfiguratorconfiguratorEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request or Limit Exceeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductconfiguratorconfiguratorEntity> productConfiguratorCopyConfiguratorWithHttpInfo(String tenantId, String sourceConfiguratorId, ProductConfiguratorCopyConfiguratorRequest body) throws ApiException {
        okhttp3.Call localVarCall = productConfiguratorCopyConfiguratorValidateBeforeCall(tenantId, sourceConfiguratorId, body, null);
        Type localVarReturnType = new TypeToken<ProductconfiguratorconfiguratorEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy Configurator (asynchronously)
     * Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.
     * @param tenantId  (required)
     * @param sourceConfiguratorId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request or Limit Exceeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorCopyConfiguratorAsync(String tenantId, String sourceConfiguratorId, ProductConfiguratorCopyConfiguratorRequest body, final ApiCallback<ProductconfiguratorconfiguratorEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = productConfiguratorCopyConfiguratorValidateBeforeCall(tenantId, sourceConfiguratorId, body, _callback);
        Type localVarReturnType = new TypeToken<ProductconfiguratorconfiguratorEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productConfiguratorCreateConfigurator
     * @param tenantId  (required)
     * @param productId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorCreateConfiguratorCall(String tenantId, String productId, ProductConfiguratorCreateConfiguratorRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{tenantId}/product/{productId}/create"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "standardAuthorization", "APIAuthorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productConfiguratorCreateConfiguratorValidateBeforeCall(String tenantId, String productId, ProductConfiguratorCreateConfiguratorRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling productConfiguratorCreateConfigurator(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productConfiguratorCreateConfigurator(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productConfiguratorCreateConfigurator(Async)");
        }

        return productConfiguratorCreateConfiguratorCall(tenantId, productId, body, _callback);

    }

    /**
     * Create Configurator
     * Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
     * @param tenantId  (required)
     * @param productId  (required)
     * @param body  (required)
     * @return ProductconfiguratorconfiguratorEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProductconfiguratorconfiguratorEntity productConfiguratorCreateConfigurator(String tenantId, String productId, ProductConfiguratorCreateConfiguratorRequest body) throws ApiException {
        ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResp = productConfiguratorCreateConfiguratorWithHttpInfo(tenantId, productId, body);
        return localVarResp.getData();
    }

    /**
     * Create Configurator
     * Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
     * @param tenantId  (required)
     * @param productId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ProductconfiguratorconfiguratorEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductconfiguratorconfiguratorEntity> productConfiguratorCreateConfiguratorWithHttpInfo(String tenantId, String productId, ProductConfiguratorCreateConfiguratorRequest body) throws ApiException {
        okhttp3.Call localVarCall = productConfiguratorCreateConfiguratorValidateBeforeCall(tenantId, productId, body, null);
        Type localVarReturnType = new TypeToken<ProductconfiguratorconfiguratorEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Configurator (asynchronously)
     * Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.
     * @param tenantId  (required)
     * @param productId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorCreateConfiguratorAsync(String tenantId, String productId, ProductConfiguratorCreateConfiguratorRequest body, final ApiCallback<ProductconfiguratorconfiguratorEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = productConfiguratorCreateConfiguratorValidateBeforeCall(tenantId, productId, body, _callback);
        Type localVarReturnType = new TypeToken<ProductconfiguratorconfiguratorEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productConfiguratorDeleteConfigurator
     * @param tenantId  (required)
     * @param configuratorId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorDeleteConfiguratorCall(String tenantId, String configuratorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{tenantId}/configurator/{configuratorId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "configuratorId" + "}", localVarApiClient.escapeString(configuratorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "standardAuthorization", "APIAuthorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productConfiguratorDeleteConfiguratorValidateBeforeCall(String tenantId, String configuratorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling productConfiguratorDeleteConfigurator(Async)");
        }

        // verify the required parameter 'configuratorId' is set
        if (configuratorId == null) {
            throw new ApiException("Missing the required parameter 'configuratorId' when calling productConfiguratorDeleteConfigurator(Async)");
        }

        return productConfiguratorDeleteConfiguratorCall(tenantId, configuratorId, _callback);

    }

    /**
     * Delete Configurator
     * Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
     * @param tenantId  (required)
     * @param configuratorId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object productConfiguratorDeleteConfigurator(String tenantId, String configuratorId) throws ApiException {
        ApiResponse<Object> localVarResp = productConfiguratorDeleteConfiguratorWithHttpInfo(tenantId, configuratorId);
        return localVarResp.getData();
    }

    /**
     * Delete Configurator
     * Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
     * @param tenantId  (required)
     * @param configuratorId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> productConfiguratorDeleteConfiguratorWithHttpInfo(String tenantId, String configuratorId) throws ApiException {
        okhttp3.Call localVarCall = productConfiguratorDeleteConfiguratorValidateBeforeCall(tenantId, configuratorId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Configurator (asynchronously)
     * Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.
     * @param tenantId  (required)
     * @param configuratorId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorDeleteConfiguratorAsync(String tenantId, String configuratorId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = productConfiguratorDeleteConfiguratorValidateBeforeCall(tenantId, configuratorId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productConfiguratorGetConfiguratorByProductId
     * @param tenantId  (required)
     * @param productId  (required)
     * @param status  (optional, default to UNKNOWN)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorGetConfiguratorByProductIdCall(String tenantId, String productId, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{tenantId}/product/{productId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "standardAuthorization", "APIAuthorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productConfiguratorGetConfiguratorByProductIdValidateBeforeCall(String tenantId, String productId, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling productConfiguratorGetConfiguratorByProductId(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productConfiguratorGetConfiguratorByProductId(Async)");
        }

        return productConfiguratorGetConfiguratorByProductIdCall(tenantId, productId, status, _callback);

    }

    /**
     * Get Configurator by Product ID
     * Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
     * @param tenantId  (required)
     * @param productId  (required)
     * @param status  (optional, default to UNKNOWN)
     * @return ProductconfiguratorconfiguratorEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProductconfiguratorconfiguratorEntity productConfiguratorGetConfiguratorByProductId(String tenantId, String productId, String status) throws ApiException {
        ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResp = productConfiguratorGetConfiguratorByProductIdWithHttpInfo(tenantId, productId, status);
        return localVarResp.getData();
    }

    /**
     * Get Configurator by Product ID
     * Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
     * @param tenantId  (required)
     * @param productId  (required)
     * @param status  (optional, default to UNKNOWN)
     * @return ApiResponse&lt;ProductconfiguratorconfiguratorEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductconfiguratorconfiguratorEntity> productConfiguratorGetConfiguratorByProductIdWithHttpInfo(String tenantId, String productId, String status) throws ApiException {
        okhttp3.Call localVarCall = productConfiguratorGetConfiguratorByProductIdValidateBeforeCall(tenantId, productId, status, null);
        Type localVarReturnType = new TypeToken<ProductconfiguratorconfiguratorEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Configurator by Product ID (asynchronously)
     * Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
     * @param tenantId  (required)
     * @param productId  (required)
     * @param status  (optional, default to UNKNOWN)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorGetConfiguratorByProductIdAsync(String tenantId, String productId, String status, final ApiCallback<ProductconfiguratorconfiguratorEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = productConfiguratorGetConfiguratorByProductIdValidateBeforeCall(tenantId, productId, status, _callback);
        Type localVarReturnType = new TypeToken<ProductconfiguratorconfiguratorEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productConfiguratorGetConfiguratorByProductId2
     * @param tenantId  (required)
     * @param productId  (required)
     * @param status  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorGetConfiguratorByProductId2Call(String tenantId, String productId, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{tenantId}/product/{productId}/status/{status}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "status" + "}", localVarApiClient.escapeString(status.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "standardAuthorization", "APIAuthorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productConfiguratorGetConfiguratorByProductId2ValidateBeforeCall(String tenantId, String productId, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling productConfiguratorGetConfiguratorByProductId2(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productConfiguratorGetConfiguratorByProductId2(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling productConfiguratorGetConfiguratorByProductId2(Async)");
        }

        return productConfiguratorGetConfiguratorByProductId2Call(tenantId, productId, status, _callback);

    }

    /**
     * Get Configurator by Product ID
     * Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
     * @param tenantId  (required)
     * @param productId  (required)
     * @param status  (required)
     * @return ProductconfiguratorconfiguratorEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProductconfiguratorconfiguratorEntity productConfiguratorGetConfiguratorByProductId2(String tenantId, String productId, String status) throws ApiException {
        ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResp = productConfiguratorGetConfiguratorByProductId2WithHttpInfo(tenantId, productId, status);
        return localVarResp.getData();
    }

    /**
     * Get Configurator by Product ID
     * Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
     * @param tenantId  (required)
     * @param productId  (required)
     * @param status  (required)
     * @return ApiResponse&lt;ProductconfiguratorconfiguratorEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductconfiguratorconfiguratorEntity> productConfiguratorGetConfiguratorByProductId2WithHttpInfo(String tenantId, String productId, String status) throws ApiException {
        okhttp3.Call localVarCall = productConfiguratorGetConfiguratorByProductId2ValidateBeforeCall(tenantId, productId, status, null);
        Type localVarReturnType = new TypeToken<ProductconfiguratorconfiguratorEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Configurator by Product ID (asynchronously)
     * Retrieve product configurations with status details, filtered by product and tenant IDs. Flexible options for specifying additional status parameters.
     * @param tenantId  (required)
     * @param productId  (required)
     * @param status  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorGetConfiguratorByProductId2Async(String tenantId, String productId, String status, final ApiCallback<ProductconfiguratorconfiguratorEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = productConfiguratorGetConfiguratorByProductId2ValidateBeforeCall(tenantId, productId, status, _callback);
        Type localVarReturnType = new TypeToken<ProductconfiguratorconfiguratorEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productConfiguratorListConfigurators
     * @param tenantId  (required)
     * @param productId  (required)
     * @param pageSize  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request or Limit Exceeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorListConfiguratorsCall(String tenantId, String productId, Long pageSize, ProductConfiguratorListPropertiesRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{tenantId}/product/{productId}/page-size/{pageSize}/configurators"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "pageSize" + "}", localVarApiClient.escapeString(pageSize.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "standardAuthorization", "APIAuthorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productConfiguratorListConfiguratorsValidateBeforeCall(String tenantId, String productId, Long pageSize, ProductConfiguratorListPropertiesRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling productConfiguratorListConfigurators(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productConfiguratorListConfigurators(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling productConfiguratorListConfigurators(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productConfiguratorListConfigurators(Async)");
        }

        return productConfiguratorListConfiguratorsCall(tenantId, productId, pageSize, body, _callback);

    }

    /**
     * List Product Configurators
     * List all product configurators.
     * @param tenantId  (required)
     * @param productId  (required)
     * @param pageSize  (required)
     * @param body  (required)
     * @return ConfiguratorListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request or Limit Exceeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ConfiguratorListResponse productConfiguratorListConfigurators(String tenantId, String productId, Long pageSize, ProductConfiguratorListPropertiesRequest body) throws ApiException {
        ApiResponse<ConfiguratorListResponse> localVarResp = productConfiguratorListConfiguratorsWithHttpInfo(tenantId, productId, pageSize, body);
        return localVarResp.getData();
    }

    /**
     * List Product Configurators
     * List all product configurators.
     * @param tenantId  (required)
     * @param productId  (required)
     * @param pageSize  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ConfiguratorListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request or Limit Exceeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfiguratorListResponse> productConfiguratorListConfiguratorsWithHttpInfo(String tenantId, String productId, Long pageSize, ProductConfiguratorListPropertiesRequest body) throws ApiException {
        okhttp3.Call localVarCall = productConfiguratorListConfiguratorsValidateBeforeCall(tenantId, productId, pageSize, body, null);
        Type localVarReturnType = new TypeToken<ConfiguratorListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Product Configurators (asynchronously)
     * List all product configurators.
     * @param tenantId  (required)
     * @param productId  (required)
     * @param pageSize  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request or Limit Exceeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorListConfiguratorsAsync(String tenantId, String productId, Long pageSize, ProductConfiguratorListPropertiesRequest body, final ApiCallback<ConfiguratorListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = productConfiguratorListConfiguratorsValidateBeforeCall(tenantId, productId, pageSize, body, _callback);
        Type localVarReturnType = new TypeToken<ConfiguratorListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productConfiguratorUpdateConfigurator
     * @param tenantId  (required)
     * @param configuratorId  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request or Limit Exceeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorUpdateConfiguratorCall(String tenantId, String configuratorId, ProductConfiguratorUpdateConfiguratorRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{tenantId}/configurator/{configuratorId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "configuratorId" + "}", localVarApiClient.escapeString(configuratorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "standardAuthorization", "APIAuthorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productConfiguratorUpdateConfiguratorValidateBeforeCall(String tenantId, String configuratorId, ProductConfiguratorUpdateConfiguratorRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling productConfiguratorUpdateConfigurator(Async)");
        }

        // verify the required parameter 'configuratorId' is set
        if (configuratorId == null) {
            throw new ApiException("Missing the required parameter 'configuratorId' when calling productConfiguratorUpdateConfigurator(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling productConfiguratorUpdateConfigurator(Async)");
        }

        return productConfiguratorUpdateConfiguratorCall(tenantId, configuratorId, body, _callback);

    }

    /**
     * Update Configurator
     * Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
     * @param tenantId  (required)
     * @param configuratorId  (required)
     * @param body  (required)
     * @return ProductconfiguratorconfiguratorEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request or Limit Exceeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ProductconfiguratorconfiguratorEntity productConfiguratorUpdateConfigurator(String tenantId, String configuratorId, ProductConfiguratorUpdateConfiguratorRequest body) throws ApiException {
        ApiResponse<ProductconfiguratorconfiguratorEntity> localVarResp = productConfiguratorUpdateConfiguratorWithHttpInfo(tenantId, configuratorId, body);
        return localVarResp.getData();
    }

    /**
     * Update Configurator
     * Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
     * @param tenantId  (required)
     * @param configuratorId  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ProductconfiguratorconfiguratorEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request or Limit Exceeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductconfiguratorconfiguratorEntity> productConfiguratorUpdateConfiguratorWithHttpInfo(String tenantId, String configuratorId, ProductConfiguratorUpdateConfiguratorRequest body) throws ApiException {
        okhttp3.Call localVarCall = productConfiguratorUpdateConfiguratorValidateBeforeCall(tenantId, configuratorId, body, null);
        Type localVarReturnType = new TypeToken<ProductconfiguratorconfiguratorEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Configurator (asynchronously)
     * Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations
     * @param tenantId  (required)
     * @param configuratorId  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request or Limit Exceeded </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred is thrown when an incompatible payload is sent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productConfiguratorUpdateConfiguratorAsync(String tenantId, String configuratorId, ProductConfiguratorUpdateConfiguratorRequest body, final ApiCallback<ProductconfiguratorconfiguratorEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = productConfiguratorUpdateConfiguratorValidateBeforeCall(tenantId, configuratorId, body, _callback);
        Type localVarReturnType = new TypeToken<ProductconfiguratorconfiguratorEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
