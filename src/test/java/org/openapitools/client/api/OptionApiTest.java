/*
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import GeminiCommerce_ProductConfigurator.ApiException;
import org.openapitools.client.model.GooglerpcStatus;
import org.openapitools.client.model.OptionListOptionsResponse;
import org.openapitools.client.model.ProductConfiguratorBulkCreateOptionsRequest;
import org.openapitools.client.model.ProductConfiguratorBulkDeleteOptionsRequest;
import org.openapitools.client.model.ProductConfiguratorBulkUpdateOptionsRequest;
import org.openapitools.client.model.ProductConfiguratorCopyOptionRequest;
import org.openapitools.client.model.ProductConfiguratorCreateOptionRequest;
import org.openapitools.client.model.ProductConfiguratorListPropertiesRequest;
import org.openapitools.client.model.ProductConfiguratorUpdateOptionRequest;
import org.openapitools.client.model.ProductconfiguratoroptionBulkCreateResponse;
import org.openapitools.client.model.ProductconfiguratoroptionBulkUpdateResponse;
import org.openapitools.client.model.ProductconfiguratoroptionEntity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OptionApi
 */
@Disabled
public class OptionApiTest {

    private final OptionApi api = new OptionApi();

    /**
     * Bulk Create Options
     *
     * Add multiple options to an existing step simultaneously. Submit a POST request with the necessary option details in the body to efficiently expand the configuration possibilities in bulk. Streamline large-scale option management effortlessly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorBulkCreateOptionsTest() throws ApiException {
        String tenantId = null;
        String stepId = null;
        ProductConfiguratorBulkCreateOptionsRequest body = null;
        ProductconfiguratoroptionBulkCreateResponse response = api.productConfiguratorBulkCreateOptions(tenantId, stepId, body);
        // TODO: test validations
    }

    /**
     * Bulk Delete Options
     *
     * Efficiently remove multiple options from configurations using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of option IDs in the body for streamlined option management.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorBulkDeleteOptionsTest() throws ApiException {
        String tenantId = null;
        ProductConfiguratorBulkDeleteOptionsRequest body = null;
        Object response = api.productConfiguratorBulkDeleteOptions(tenantId, body);
        // TODO: test validations
    }

    /**
     * Bulk Update Options
     *
     * Effortlessly update multiple options. Specify the tenant ID and submit a PUT request with the updated option details in the body. Streamline the customization of a multitude of options in one go.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorBulkUpdateOptionsTest() throws ApiException {
        String tenantId = null;
        ProductConfiguratorBulkUpdateOptionsRequest body = null;
        ProductconfiguratoroptionBulkUpdateResponse response = api.productConfiguratorBulkUpdateOptions(tenantId, body);
        // TODO: test validations
    }

    /**
     * Copy Option
     *
     * Duplicate an existing option from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new option based on the source configuration. Streamline option replication effortlessly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorCopyOptionTest() throws ApiException {
        String tenantId = null;
        String sourceOptionId = null;
        ProductConfiguratorCopyOptionRequest body = null;
        ProductconfiguratoroptionEntity response = api.productConfiguratorCopyOption(tenantId, sourceOptionId, body);
        // TODO: test validations
    }

    /**
     * Create Option
     *
     * Integrate a new option into an existing step by specifying the tenant and step IDs. Use a POST request with the required option details in the body for seamless customization and expansion of product configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorCreateOptionTest() throws ApiException {
        String tenantId = null;
        String stepId = null;
        ProductConfiguratorCreateOptionRequest body = null;
        ProductconfiguratoroptionEntity response = api.productConfiguratorCreateOption(tenantId, stepId, body);
        // TODO: test validations
    }

    /**
     * Delete Option
     *
     * Remove a specific option by specifying the tenant and option IDs. Ensure precision in option management with a straightforward DELETE request, simplifying the elimination of unwanted configuration choices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorDeleteOptionTest() throws ApiException {
        String tenantId = null;
        String optionId = null;
        Object response = api.productConfiguratorDeleteOption(tenantId, optionId);
        // TODO: test validations
    }

    /**
     * List Options
     *
     * Retrieve a list of options for a specific step based on tenant and step IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all options associated with the step.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorListOptionsTest() throws ApiException {
        String tenantId = null;
        String stepId = null;
        Long pageSize = null;
        ProductConfiguratorListPropertiesRequest body = null;
        OptionListOptionsResponse response = api.productConfiguratorListOptions(tenantId, stepId, pageSize, body);
        // TODO: test validations
    }

    /**
     * Update Option
     *
     * Modify an existing option by specifying the tenant and option IDs. Utilize a PUT request with updated option details in the body for seamless customization and fine-tuning of your product configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorUpdateOptionTest() throws ApiException {
        String tenantId = null;
        String optionId = null;
        ProductConfiguratorUpdateOptionRequest body = null;
        ProductconfiguratoroptionEntity response = api.productConfiguratorUpdateOption(tenantId, optionId, body);
        // TODO: test validations
    }

}
