/*
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import GeminiCommerce_ProductConfigurator.ApiException;
import org.openapitools.client.model.GooglerpcStatus;
import org.openapitools.client.model.ProductConfiguratorBulkCreateStepsRequest;
import org.openapitools.client.model.ProductConfiguratorBulkDeleteStepsRequest;
import org.openapitools.client.model.ProductConfiguratorCopyStepRequest;
import org.openapitools.client.model.ProductConfiguratorCreateStepRequest;
import org.openapitools.client.model.ProductConfiguratorUpdateStepRequest;
import org.openapitools.client.model.ProductconfiguratorstepBulkCreateResponse;
import org.openapitools.client.model.ProductconfiguratorstepEntity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StepApi
 */
@Disabled
public class StepApiTest {

    private final StepApi api = new StepApi();

    /**
     * Bulk Create Steps
     *
     * Add multiple steps to an existing product configurator simultaneously. Submit a POST request with the necessary step details in the body to efficiently extend the configuration process in bulk. Simplify large-scale configuration management effortlessly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorBulkCreateStepsTest() throws ApiException {
        String tenantId = null;
        String configuratorId = null;
        ProductConfiguratorBulkCreateStepsRequest body = null;
        ProductconfiguratorstepBulkCreateResponse response = api.productConfiguratorBulkCreateSteps(tenantId, configuratorId, body);
        // TODO: test validations
    }

    /**
     * Bulk Delete Steps
     *
     * Efficiently remove multiple steps from a product configurator using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of step IDs in the body for streamlined configuration management.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorBulkDeleteStepsTest() throws ApiException {
        String tenantId = null;
        ProductConfiguratorBulkDeleteStepsRequest body = null;
        Object response = api.productConfiguratorBulkDeleteSteps(tenantId, body);
        // TODO: test validations
    }

    /**
     * Copy Step
     *
     * Duplicate an existing step from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new step based on the source configuration. Streamline step replication effortlessly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorCopyStepTest() throws ApiException {
        String tenantId = null;
        String sourceStepId = null;
        ProductConfiguratorCopyStepRequest body = null;
        ProductconfiguratorstepEntity response = api.productConfiguratorCopyStep(tenantId, sourceStepId, body);
        // TODO: test validations
    }

    /**
     * Create Step
     *
     * Add a new step to an existing product configurator by specifying the tenant and configurator IDs. Utilize a POST request with the required step details in the body to seamlessly extend the configuration process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorCreateStepTest() throws ApiException {
        String tenantId = null;
        String configuratorId = null;
        ProductConfiguratorCreateStepRequest body = null;
        ProductconfiguratorstepEntity response = api.productConfiguratorCreateStep(tenantId, configuratorId, body);
        // TODO: test validations
    }

    /**
     * Delete Step
     *
     * Remove a step from a product configurator by specifying the tenant and step IDs. Ensure precision in configuration management with a straightforward DELETE request, simplifying the elimination of unwanted steps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorDeleteStepTest() throws ApiException {
        String tenantId = null;
        String stepId = null;
        GooglerpcStatus response = api.productConfiguratorDeleteStep(tenantId, stepId);
        // TODO: test validations
    }

    /**
     * Update Step
     *
     * Modify an existing step within a product configurator by specifying the tenant and step IDs. Utilize a PUT request with updated step details in the body for seamless customization and fine-tuning of your product configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorUpdateStepTest() throws ApiException {
        String tenantId = null;
        String stepId = null;
        ProductConfiguratorUpdateStepRequest body = null;
        ProductconfiguratorstepEntity response = api.productConfiguratorUpdateStep(tenantId, stepId, body);
        // TODO: test validations
    }

}
