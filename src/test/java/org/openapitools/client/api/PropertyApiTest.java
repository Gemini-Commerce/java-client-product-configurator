/*
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import GeminiCommerce_ProductConfigurator.ApiException;
import org.openapitools.client.model.GooglerpcStatus;
import org.openapitools.client.model.ProductConfiguratorBulkCreatePropertiesRequest;
import org.openapitools.client.model.ProductConfiguratorBulkUpdatePropertiesRequest;
import org.openapitools.client.model.ProductConfiguratorCreatePropertyRequest;
import org.openapitools.client.model.ProductConfiguratorListPropertiesRequest;
import org.openapitools.client.model.ProductConfiguratorUpdatePropertyRequest;
import org.openapitools.client.model.ProductconfiguratorpropertyBulkCreateResponse;
import org.openapitools.client.model.ProductconfiguratorpropertyBulkUpdateResponse;
import org.openapitools.client.model.ProductconfiguratorpropertyEntity;
import org.openapitools.client.model.PropertyListPropertiesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PropertyApi
 */
@Disabled
public class PropertyApiTest {

    private final PropertyApi api = new PropertyApi();

    /**
     * Bulk Create Properties
     *
     * Efficiently add multiple properties to configurations with a bulk create operation. Specify the tenant ID and submit a POST request with the necessary property details in the body for streamlined property management.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorBulkCreatePropertiesTest() throws ApiException {
        String tenantId = null;
        ProductConfiguratorBulkCreatePropertiesRequest body = null;
        ProductconfiguratorpropertyBulkCreateResponse response = api.productConfiguratorBulkCreateProperties(tenantId, body);
        // TODO: test validations
    }

    /**
     * Bulk Update Properties
     *
     * Effortlessly update multiple properties. Specify the tenant ID and submit a PUT request with the updated property details in the body. Streamline the customization of a multitude of properties in one go.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorBulkUpdatePropertiesTest() throws ApiException {
        String tenantId = null;
        ProductConfiguratorBulkUpdatePropertiesRequest body = null;
        ProductconfiguratorpropertyBulkUpdateResponse response = api.productConfiguratorBulkUpdateProperties(tenantId, body);
        // TODO: test validations
    }

    /**
     * Create Property
     *
     * Integrate a new property into configurations by specifying the tenant ID. Use a POST request with the required property details in the body for seamless customization and expansion of product configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorCreatePropertyTest() throws ApiException {
        String tenantId = null;
        ProductConfiguratorCreatePropertyRequest body = null;
        ProductconfiguratorpropertyEntity response = api.productConfiguratorCreateProperty(tenantId, body);
        // TODO: test validations
    }

    /**
     * List Properties
     *
     * Retrieve a list of properties for a specific matrix based on tenant and matrix IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all properties associated with the matrix.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorListPropertiesTest() throws ApiException {
        String tenantId = null;
        String matrixId = null;
        String pageSize = null;
        ProductConfiguratorListPropertiesRequest body = null;
        PropertyListPropertiesResponse response = api.productConfiguratorListProperties(tenantId, matrixId, pageSize, body);
        // TODO: test validations
    }

    /**
     * Update Property
     *
     * Modify an existing property by specifying the tenant and property IDs. Utilize a PUT request with updated property details in the body for seamless customization and fine-tuning of your product configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorUpdatePropertyTest() throws ApiException {
        String tenantId = null;
        String propertyId = null;
        ProductConfiguratorUpdatePropertyRequest body = null;
        ProductconfiguratorpropertyEntity response = api.productConfiguratorUpdateProperty(tenantId, propertyId, body);
        // TODO: test validations
    }

}
