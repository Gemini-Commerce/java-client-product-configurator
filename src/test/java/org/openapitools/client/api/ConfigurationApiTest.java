/*
 * Product Configurator Service
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import GeminiCommerce_ProductConfigurator.ApiException;
import org.openapitools.client.model.ConfigurationGetAvailableConfigurationResponse;
import org.openapitools.client.model.ConfigurationGetConfigurationFromSelectionsResponse;
import org.openapitools.client.model.GooglerpcStatus;
import org.openapitools.client.model.ProductConfiguratorGetAvailableConfiguration2Request;
import org.openapitools.client.model.ProductConfiguratorGetConfigurationFromSelectionsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigurationApi
 */
@Disabled
public class ConfigurationApiTest {

    private final ConfigurationApi api = new ConfigurationApi();

    /**
     * Get Available Configuration
     *
     * Retrieve available configurations for a specific product and tenant. Use a GET request for read-only access or submit additional criteria in the body of a POST request for tailored configuration results. Streamline the retrieval of configurations effortlessly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorGetAvailableConfigurationTest() throws ApiException {
        String tenantId = null;
        String productId = null;
        String configuratorId = null;
        ConfigurationGetAvailableConfigurationResponse response = api.productConfiguratorGetAvailableConfiguration(tenantId, productId, configuratorId);
        // TODO: test validations
    }

    /**
     * Get Available Configuration
     *
     * Retrieve available configurations for a specific product and tenant. Use a GET request for read-only access or submit additional criteria in the body of a POST request for tailored configuration results. Streamline the retrieval of configurations effortlessly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorGetAvailableConfiguration2Test() throws ApiException {
        String tenantId = null;
        String productId = null;
        ProductConfiguratorGetAvailableConfiguration2Request body = null;
        ConfigurationGetAvailableConfigurationResponse response = api.productConfiguratorGetAvailableConfiguration2(tenantId, productId, body);
        // TODO: test validations
    }

    /**
     * Get Configuration from Selections
     *
     * Retrieve a configuration based on user selections for a specific product and tenant. Submit a POST request with user selections in the body to receive a tailored configuration. Enhance the user experience by dynamically generating configurations based on user input.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productConfiguratorGetConfigurationFromSelectionsTest() throws ApiException {
        String tenantId = null;
        String productId = null;
        ProductConfiguratorGetConfigurationFromSelectionsRequest body = null;
        ConfigurationGetConfigurationFromSelectionsResponse response = api.productConfiguratorGetConfigurationFromSelections(tenantId, productId, body);
        // TODO: test validations
    }

}
